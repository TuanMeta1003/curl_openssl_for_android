name: Android Build and Release

on:
  workflow_dispatch:
    inputs:
      ndk_version:
        description: 'Android NDK version (e.g., r24, r28)'
        required: false
        default: 'r24'
  schedule:
    - cron: '0 17 * * *' # 0h sáng UTC+7

env:
  ANDROID_TARGET_API: "21"
  ANDROID_NDK_VERSION: ${{ github.event.inputs.ndk_version || 'r24' }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  ABIS: "armeabi-v7a arm64-v8a x86 x86_64"

jobs:
  get_versions:
    name: Fetch Latest Versions
    runs-on: ubuntu-latest
    outputs:
      openssl_version: ${{ steps.openssl.outputs.openssl_version }}
      curl_version: ${{ steps.curl.outputs.curl_version }}
    steps:
      - name: Install jq and curl
        run: sudo apt-get update -qq && sudo apt-get install -qq jq curl

      - name: Get latest OpenSSL version
        id: openssl
        run: |
          tag=$(curl -s https://api.github.com/repos/openssl/openssl/releases/latest | jq -r .tag_name)
          version=${tag#openssl-}
          version=${version#OpenSSL-}
          echo "openssl_version=$version" >> $GITHUB_OUTPUT

      - name: Get latest cURL version
        id: curl
        run: |
          tag=curl-$(curl -s https://api.github.com/repos/curl/curl/releases/latest | jq -r .name)
          version=${tag#curl-}
          echo "curl_version=$version" >> $GITHUB_OUTPUT

  Compile_OpenSSL_for_Android:
    name: Compile OpenSSL ${{ matrix.ANDROID_TARGET_ABI }}
    needs: get_versions
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ANDROID_TARGET_ABI: [armeabi-v7a, arm64-v8a, x86, x86_64]
    env:
      OPENSSL_VERSION: ${{ needs.get_versions.outputs.openssl_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install prerequisites
        run: sudo apt-get update -qq && sudo apt-get install -qq aria2

      - name: Download Android NDK
        run: |
          aria2c -q -o android-ndk-${{ env.ANDROID_NDK_VERSION }}.zip \
            https://dl.google.com/android/repository/android-ndk-${{ env.ANDROID_NDK_VERSION }}-linux.zip
          unzip -q android-ndk-${{ env.ANDROID_NDK_VERSION }}.zip

      - name: Download OpenSSL
        run: |
          aria2c -q -o openssl-${{ env.OPENSSL_VERSION }}.tar.gz \
            https://github.com/openssl/openssl/releases/download/openssl-${{ env.OPENSSL_VERSION }}/openssl-${{ env.OPENSSL_VERSION }}.tar.gz
          tar xf openssl-${{ env.OPENSSL_VERSION }}.tar.gz

      - name: Build OpenSSL
        run: |
          bash openssl_build_new.sh \
            ${{ env.ANDROID_TARGET_API }} \
            ${{ matrix.ANDROID_TARGET_ABI }} \
            ${{ env.OPENSSL_VERSION }} \
            ${{ env.ANDROID_NDK_VERSION }}

      - name: Package OpenSSL artifact
        run: |
          tar -C openssl_${{ env.OPENSSL_VERSION }}_${{ matrix.ANDROID_TARGET_ABI }} \
            -czf OpenSSL_${{ env.OPENSSL_VERSION }}_${{ matrix.ANDROID_TARGET_ABI }}.tar.gz .

      - name: Upload OpenSSL artifact
        uses: actions/upload-artifact@v4
        with:
          name: OpenSSL-${{ matrix.ANDROID_TARGET_ABI }}
          path: OpenSSL_${{ env.OPENSSL_VERSION }}_${{ matrix.ANDROID_TARGET_ABI }}.tar.gz

  Compile_cURL_for_Android:
    name: Compile cURL ${{ matrix.ANDROID_TARGET_ABI }}
    needs: [get_versions, Compile_OpenSSL_for_Android]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ANDROID_TARGET_ABI: [armeabi-v7a, arm64-v8a, x86, x86_64]
    env:
      CURL_VERSION: ${{ needs.get_versions.outputs.curl_version }}
      OPENSSL_VERSION: ${{ needs.get_versions.outputs.openssl_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install prerequisites
        run: sudo apt-get update -qq && sudo apt-get install -qq aria2 autoconf automake libtool pkg-config

      - name: Download Android NDK
        run: |
          aria2c -q -o android-ndk-${{ env.ANDROID_NDK_VERSION }}.zip \
            https://dl.google.com/android/repository/android-ndk-${{ env.ANDROID_NDK_VERSION }}-linux.zip
          unzip -q android-ndk-${{ env.ANDROID_NDK_VERSION }}.zip

      - name: Download cURL
        run: |
          aria2c -q -o curl-${{ env.CURL_VERSION }}.tar.gz \
            https://curl.se/download/curl-${{ env.CURL_VERSION }}.tar.gz
          tar xf curl-${{ env.CURL_VERSION }}.tar.gz

      - name: Download OpenSSL artifact
        uses: actions/download-artifact@v4
        with:
          name: OpenSSL-${{ matrix.ANDROID_TARGET_ABI }}
          path: ./

      - name: Extract OpenSSL artifact
        run: |
          mkdir -p openssl_${{ env.OPENSSL_VERSION }}_${{ matrix.ANDROID_TARGET_ABI }}
          tar -xzf OpenSSL_${{ env.OPENSSL_VERSION }}_${{ matrix.ANDROID_TARGET_ABI }}.tar.gz -C openssl_${{ env.OPENSSL_VERSION }}_${{ matrix.ANDROID_TARGET_ABI }}

      - name: Build cURL with SSL
        run: |
          bash curl_build.sh \
            ${{ env.ANDROID_TARGET_API }} \
            ${{ matrix.ANDROID_TARGET_ABI }} \
            ${{ env.CURL_VERSION }} \
            ${{ env.ANDROID_NDK_VERSION }} \
            ${{ env.OPENSSL_VERSION }}

      - name: Package cURL artifact
        run: |
          tar -C curl_${{ env.CURL_VERSION }}_${{ matrix.ANDROID_TARGET_ABI }} \
            -czf curl_${{ env.CURL_VERSION }}_${{ matrix.ANDROID_TARGET_ABI }}.tar.gz .

      - name: Upload cURL artifact
        uses: actions/upload-artifact@v4
        with:
          name: cURL-${{ matrix.ANDROID_TARGET_ABI }}
          path: curl_${{ env.CURL_VERSION }}_${{ matrix.ANDROID_TARGET_ABI }}.tar.gz

  Publish_Release:
    needs:
      - Compile_OpenSSL_for_Android
      - Compile_cURL_for_Android
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Set release date
        id: date
        run: |
          echo "release_date=$(date -u +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Create organized directory structure
        run: |
          mkdir -p Output/{curl,openssl}/{arm64-v8a,armeabi-v7a,x86,x86_64}/{include,lib}
          
          find artifacts -type f | sort
          
          for ABI in $ABIS; do
            OPENSSL_ARTIFACT=$(find artifacts -name “OpenSSL_*_${ABI}.tar.gz” | head -n 1)
            
            if [ -n "$OPENSSL_ARTIFACT" ] && [ -f "$OPENSSL_ARTIFACT" ]; then
              mkdir -p tmp_openssl_${ABI}
              tar -xzf "$OPENSSL_ARTIFACT" -C tmp_openssl_${ABI}
              
              if [ -d "tmp_openssl_${ABI}/include" ]; then
                cp -r tmp_openssl_${ABI}/include/* "Output/openssl/${ABI}/include/" || true
              fi
              
              if [ -d "tmp_openssl_${ABI}/lib" ]; then
                cp -r tmp_openssl_${ABI}/lib/* "Output/openssl/${ABI}/lib/" || true
              fi
              
              rm -rf tmp_openssl_${ABI}
            else
              echo "⚠️ OpenSSL artifact for ${ABI} not found"
            fi
          done
          
          for ABI in $ABIS; do
            CURL_ARTIFACT=$(find artifacts -name "curl_*_${ABI}.tar.gz" | head -n 1)
            
            if [ -n "$CURL_ARTIFACT" ] && [ -f "$CURL_ARTIFACT" ]; then
              mkdir -p tmp_curl_${ABI}
              tar -xzf "$CURL_ARTIFACT" -C tmp_curl_${ABI}
              
              if [ -d "tmp_curl_${ABI}/include" ]; then
                cp -r tmp_curl_${ABI}/include/* "Output/curl/${ABI}/include/" || true
              fi
              
              if [ -d "tmp_curl_${ABI}/lib" ]; then
                cp -r tmp_curl_${ABI}/lib/* "Output/curl/${ABI}/lib/" || true
              fi
              
              rm -rf tmp_curl_${ABI}
            else
              echo "⚠️ cURL artifact for ${ABI} not found"
            fi
          done
          
          echo "Final directory structure:"
          find Output -type f | sort
          
          cd Output
          zip -r ../Output.zip .
          cd ..
          
          unzip -l Output.zip

      - name: Create consolidated release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: release-openssl${{ needs.get_versions.outputs.openssl_version }}-curl${{ needs.get_versions.outputs.curl_version }}-ndk${{ env.ANDROID_NDK_VERSION }}
          name: >-
            OpenSSL ${{ needs.get_versions.outputs.openssl_version }} & cURL ${{ needs.get_versions.outputs.curl_version }} Android Builds (NDK ${{ env.ANDROID_NDK_VERSION }}, Updated ${{ steps.date.outputs.release_date }})
          files: Output.zip

      - name: Tag as latest for NDK r24
        if: env.ANDROID_NDK_VERSION == 'r24'
        run: |
          git tag -f latest
          git push origin latest --force
